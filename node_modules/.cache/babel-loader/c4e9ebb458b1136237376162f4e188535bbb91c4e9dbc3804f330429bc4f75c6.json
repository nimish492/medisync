{"ast":null,"code":"$(document).ready(function () {\n  // Fetch patient data from the server\n  $.ajax({\n    url: '/api/patients',\n    method: 'GET',\n    success: function (patients) {\n      // Clear any existing content\n      $('.patient-list').empty();\n      $('.consultation-details').empty();\n      $('.medicines-table').empty(); // Clear existing medicines\n\n      // Function to format the date to DD-MM-YYYY\n      function formatDate(dateString) {\n        const date = new Date(dateString);\n        const day = date.getDate().toString().padStart(2, '0');\n        const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Months are zero-based\n        const year = date.getFullYear();\n        return `${day}-${month}-${year}`;\n      }\n\n      // Dynamically populate patient data\n      patients.forEach(patient => {\n        const formattedDob = formatDate(patient.dob);\n        const patientElement = `\n                  <div class=\"patient\" data-id=\"${patient._id}\">\n                      <img src=\"${patient.image}\" alt=\"Patient\" width=\"50px\" height=\"50px\">\n                      <div class=\"patient-info\">\n                          <h3>${patient.name}</h3>\n                          <a href=\"${patient.reportLink}\" class=\"report\">Report</a>\n                      </div>\n                      <span class=\"status ${patient.status === 'On drip' ? 'ongoing' : 'offgoing'}\">${patient.status}</span>\n                  </div>\n              `;\n        $('.patient-list').append(patientElement);\n      });\n\n      // Handle click event for patient items\n      $('.patient').click(function () {\n        const patientId = $(this).data('id');\n\n        // Find the clicked patient data\n        const selectedPatient = patients.find(patient => patient._id === patientId);\n        if (selectedPatient) {\n          const formattedDob = formatDate(selectedPatient.dob);\n          const patientDetails = `\n                      <img src=\"${selectedPatient.image}\" alt=\"Patient\" width=\"100px\" class=\"mainpatient\">\n                      <div class=\"details\">\n                          <p><b>${selectedPatient.name}</b> - ${selectedPatient.age} years (${formattedDob})</p>\n                          <p><b>Symptoms:</b> ${selectedPatient.symptoms}</p>\n                          <p><b>Diagnosis:</b> ${selectedPatient.diagnosis}</p>\n                          <p><b>Physician:</b> ${selectedPatient.physician}</p>\n                      </div>\n                  `;\n          $('.consultation-details').html(patientDetails);\n\n          // Fetch medicines for the selected patient from the integrated array\n          const medicines = selectedPatient.medicines;\n\n          // Clear any existing medicines\n          $('.medicines-table').empty();\n\n          // Build the medicines table\n          let medicinesTable = `\n                      <table class=\"medicines-table\">\n                          <thead>\n                              <tr>\n                                  <th>Name</th>\n                                  <th>Dosage</th>\n                                  <th>Frequency</th>\n                                  <th>Duration</th>\n                              </tr>\n                          </thead>\n                          <tbody>\n                  `;\n          medicines.forEach(medicine => {\n            medicinesTable += `\n                          <tr>\n                              <td>${medicine.name}</td>\n                              <td>${medicine.dosage}</td>\n                              <td>${medicine.frequency}</td>\n                              <td>${medicine.duration}</td>\n                          </tr>\n                      `;\n          });\n          medicinesTable += `\n                          </tbody>\n                      </table>\n                  `;\n          $('.medicines-table').html(medicinesTable);\n        }\n      });\n\n      // Optionally, trigger a click event on the first patient to show initial details\n      if (patients.length > 0) {\n        $('.patient').first().click();\n      }\n    },\n    error: function (error) {\n      console.error('Error fetching patient data:', error);\n    }\n  });\n});","map":{"version":3,"names":["$","document","ready","ajax","url","method","success","patients","empty","formatDate","dateString","date","Date","day","getDate","toString","padStart","month","getMonth","year","getFullYear","forEach","patient","formattedDob","dob","patientElement","_id","image","name","reportLink","status","append","click","patientId","data","selectedPatient","find","patientDetails","age","symptoms","diagnosis","physician","html","medicines","medicinesTable","medicine","dosage","frequency","duration","length","first","error","console"],"sources":["C:/Users/nimis/Downloads/react/medisync/src/index.js"],"sourcesContent":["$(document).ready(function () {\n  // Fetch patient data from the server\n  $.ajax({\n      url: '/api/patients',\n      method: 'GET',\n      success: function (patients) {\n          // Clear any existing content\n          $('.patient-list').empty();\n          $('.consultation-details').empty();\n          $('.medicines-table').empty(); // Clear existing medicines\n\n          // Function to format the date to DD-MM-YYYY\n          function formatDate(dateString) {\n              const date = new Date(dateString);\n              const day = date.getDate().toString().padStart(2, '0');\n              const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Months are zero-based\n              const year = date.getFullYear();\n              return `${day}-${month}-${year}`;\n          }\n\n          // Dynamically populate patient data\n          patients.forEach(patient => {\n              const formattedDob = formatDate(patient.dob);\n\n              const patientElement = `\n                  <div class=\"patient\" data-id=\"${patient._id}\">\n                      <img src=\"${patient.image}\" alt=\"Patient\" width=\"50px\" height=\"50px\">\n                      <div class=\"patient-info\">\n                          <h3>${patient.name}</h3>\n                          <a href=\"${patient.reportLink}\" class=\"report\">Report</a>\n                      </div>\n                      <span class=\"status ${patient.status === 'On drip' ? 'ongoing' : 'offgoing'}\">${patient.status}</span>\n                  </div>\n              `;\n              $('.patient-list').append(patientElement);\n          });\n\n          // Handle click event for patient items\n          $('.patient').click(function () {\n              const patientId = $(this).data('id');\n\n              // Find the clicked patient data\n              const selectedPatient = patients.find(patient => patient._id === patientId);\n\n              if (selectedPatient) {\n                  const formattedDob = formatDate(selectedPatient.dob);\n\n                  const patientDetails = `\n                      <img src=\"${selectedPatient.image}\" alt=\"Patient\" width=\"100px\" class=\"mainpatient\">\n                      <div class=\"details\">\n                          <p><b>${selectedPatient.name}</b> - ${selectedPatient.age} years (${formattedDob})</p>\n                          <p><b>Symptoms:</b> ${selectedPatient.symptoms}</p>\n                          <p><b>Diagnosis:</b> ${selectedPatient.diagnosis}</p>\n                          <p><b>Physician:</b> ${selectedPatient.physician}</p>\n                      </div>\n                  `;\n                  $('.consultation-details').html(patientDetails);\n\n                  // Fetch medicines for the selected patient from the integrated array\n                  const medicines = selectedPatient.medicines;\n\n                  // Clear any existing medicines\n                  $('.medicines-table').empty();\n\n                  // Build the medicines table\n                  let medicinesTable = `\n                      <table class=\"medicines-table\">\n                          <thead>\n                              <tr>\n                                  <th>Name</th>\n                                  <th>Dosage</th>\n                                  <th>Frequency</th>\n                                  <th>Duration</th>\n                              </tr>\n                          </thead>\n                          <tbody>\n                  `;\n                  medicines.forEach(medicine => {\n                      medicinesTable += `\n                          <tr>\n                              <td>${medicine.name}</td>\n                              <td>${medicine.dosage}</td>\n                              <td>${medicine.frequency}</td>\n                              <td>${medicine.duration}</td>\n                          </tr>\n                      `;\n                  });\n                  medicinesTable += `\n                          </tbody>\n                      </table>\n                  `;\n                  $('.medicines-table').html(medicinesTable);\n              }\n          });\n\n          // Optionally, trigger a click event on the first patient to show initial details\n          if (patients.length > 0) {\n              $('.patient').first().click();\n          }\n      },\n      error: function (error) {\n          console.error('Error fetching patient data:', error);\n      }\n  });\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}